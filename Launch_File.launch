1. Launch Files follow XML syntax

<?xml version="1.0"?>
<launch>
    <node pkg="package_name" type="node_type" name="node_name" output="screen"/>
                                                <!-- set different name: name="inst_1" name="inst_2"  -->
    <node pkg="rqt_image_view" type="rqt_image_view" name="camera1" args="/arena_camera_node_1/image_raw"/>
                                                                    <!-- topic name  -->
</launch>


2. Common XML tags in ROS

<node>          launches a paticular node
<include>       to include other launch file
<param>         sets a particular ROS parameter t oa specific value
<rosparam>      load a set of parameters specified in a YAML file
<arg>           used to specify varible arguments to the launch file
<group>         apply setting to a group of nodes, ns attribute lets you push the group of nodes into a separate namespace
    
3. <arg>
    <arg name="foo" />                              Declares the existence of foo
    <arg name="foo" default="1" />                  Declares foo with a default value 
    <arg name="foo" value="bar" />                  Declares foo with constant value.
    <arg name="foo" doc="description" />            Description of the argument.
    
    
my_file.launch:
    
<include file="included.launch">
  <!-- all vars that included.launch requires must be set -->
  <arg name="hoge" value="fuga" />
</include>

included.launch:

<launch>
  <!-- declare arg to be passed in -->
  <arg name="hoge" /> 
  <!-- read value of arg -->
  <param name="param" value="$(arg hoge)"/>
</launch>
    
  roslaunch my_file.launch hoge:=my_value      (.launch file is available at the current dir)
  roslaunch %YOUR_ROS_PKG% my_file.launch hoge:=my_value 
    
4. substitution <arg>
    $(find pkg)       Specifies a package-relative path:                             $(find rospy)/manifest.xml
    $(arg foo)        evaluates to the value specified by an <arg> tag.              <param name="foo" value="$(arg my_foo)" />
                        <node name="add_two_ints_server" pkg="beginner_tutorials" type="add_two_ints_server" />
                        <node name="add_two_ints_client" pkg="beginner_tutorials" type="add_two_ints_client" args="$(arg a) $(arg b)" />
                        roslaunch beginner_tutorials launch_file.launch a:=1 b:=5
    
    $(anon name)      Generates an anonymous id based on name   
                        <node name="$(anon foo)" pkg="rospy_tutorials" type="talker.py" />
                        <node name="$(anon foo)" pkg="rospy_tutorials" type="talker.py" />
    
    $(eval <expression>)   allows to evaluate arbitrary complex python expressions. 
                        <param name="circumference" value="$(eval 2.* 3.1415 * arg('radius'))"/>
    
    
    
5. if and unless
    
    if=value (optional)         If value evaluates to true, include tag and its contents. 

    unless=value (optional)     Unless value evaluates to true (which means if value evaluates to false), include tag and its contents. 
    
    <group if="$(arg foo)">
  <!-- stuff that will only be evaluated if foo is true -->
    </group>
    <param name="foo" value="bar" unless="$(arg foo)" />  <!-- This param won't be set when "unless" condition is met --> 
    
    
    
    
    
